{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to My Documentation Showcase","text":"<p>This is a sample documentation project built using Material for MkDocs, a demonstration of my ability to design, structure, and deliver professional, developer-friendly documentation systems.</p>"},{"location":"#about-this-project","title":"\ud83d\ude80 About This Project","text":"<p>This documentation is a proof of concept showing how I create clear, scalable, and well-structured technical documentation for developers, engineers, and enterprise teams. It reflects the same care and precision I apply when documenting real-world software products, APIs, SDKs, and AI systems.</p> <p>Whether it\u2019s onboarding new developers, explaining complex workflows, or supporting open-source adoption, great documentation should make learning effortless and exploration enjoyable. That\u2019s exactly what I build.</p>"},{"location":"#built-with","title":"\ud83e\uddf0 Built With","text":"<ul> <li>MkDocs: Static site generator for technical documentation  </li> <li>Material for MkDocs: Clean, responsive theme with modern UI  </li> <li>Markdown &amp; YAML: For easy authoring and configuration  </li> <li>GitHub Pages: For hosting and continuous deployment  </li> <li>GitHub Actions: For CI/CD automation  </li> </ul>"},{"location":"#what-this-demonstrates","title":"\ud83e\udde0 What This Demonstrates","text":"<p>\u2705 Writing clear, concise, and technically accurate documentation \u2705 Designing developer-friendly layouts and navigation \u2705 Integrating automation (CI/CD) for seamless updates \u2705 Organizing multi-page documentation with logical structure \u2705 Using Markdown extensions, callouts, and custom styling  </p>"},{"location":"#why-it-matters","title":"\ud83d\udca1 Why It Matters","text":"<p>Good documentation isn\u2019t just words, it\u2019s a developer experience. It shapes how users understand your product, how fast teams can integrate it, and how confidently they can use it.</p> <p>By combining my background in AI Engineering, Developer Relations, and Technical Writing, I create documentation that not only informs but also inspires action.</p>"},{"location":"about-me/","title":"\ud83d\udc4b About Me","text":"<p>I turn complex technical concepts into straightforward, engaging content that informs, inspires, and drives adoption.</p> <p>With over 4 years of experience spanning AI Engineering, Data Science, Technical Writing, and Developer Relations (DevRel), I bridge the gap between engineering and communication, helping teams build, document, and deliver impactful software and AI systems.</p>"},{"location":"about-me/#what-i-do","title":"\ud83e\udde0 What I Do","text":""},{"location":"about-me/#technical-writing-documentation","title":"\ud83e\udde9 Technical Writing &amp; Documentation","text":"<p>I create developer-focused documentation and technical content that helps technical audiences succeed. From APIs and SDKs to AI agents and SaaS platforms, I write what developers, engineers, and technical managers actually want to read.</p> <p>Core Deliverables: - User manuals, quick start guides, installation &amp; configuration guides - Developer &amp; API documentation (SDKs, ML models, AI workflows) - Release notes, PRDs, test plans, and technical specifications - Datasheets, white papers, case studies, and regulatory documentation - Online help systems, FAQs, READMEs, changelogs, and contribution guides</p>"},{"location":"about-me/#developer-education-enablement","title":"\ud83d\ude80 Developer Education &amp; Enablement","text":"<p>I help developers learn, build, and adopt faster by creating: - Tutorials, onboarding materials, and walkthroughs - AI/ML and software engineering guides simplified for clarity - Training manuals and study guides for technical teams - Compliance and process documentation for enterprise workflows</p>"},{"location":"about-me/#developer-relations-marketing-support","title":"\ud83d\udca1 Developer Relations &amp; Marketing Support","text":"<p>I support brands in building developer trust through authentic, value-driven content that resonates.</p> <p>Focus Areas: - Technical storytelling and educational content - DevRel and advocacy content (articles, blog posts, community engagement) - SEO-optimized web copy, release notes, landing pages, and product writeups - Developer onboarding and API adoption strategies  </p>"},{"location":"about-me/#ai-data-science-expertise","title":"\ud83e\udd16 AI &amp; Data Science Expertise","text":"<p>As an AI Engineer and Data Scientist, I build and deploy intelligent systems that turn data into insight and automation into impact.</p>"},{"location":"about-me/#core-expertise","title":"\ud83d\udd25 Core Expertise","text":"<ul> <li>End-to-End ML Development: From data collection to deployment, architecting complete AI pipelines that drive real business value.  </li> <li>AI Application Development: Building production-ready AI apps using FastAPI and Flask, not just models, but scalable solutions.  </li> <li>Data Engineering &amp; Analytics: Creating robust ETL pipelines, analytics dashboards, and data systems using Python and SQL.  </li> </ul>"},{"location":"about-me/#specialized-skills","title":"\ud83e\udde0 Specialized Skills","text":"<ul> <li>Generative AI: Building RAG systems, AI agents, and LLM-based workflows for automation and customer engagement.  </li> <li>Web Scraping &amp; Automation: Designing scalable scrapers that process millions of data points efficiently and ethically.  </li> </ul>"},{"location":"about-me/#technical-toolbox","title":"\ud83d\udee0 Technical Toolbox","text":"<p>Languages &amp; Tools: Python, SQL, Markdown, Asciidoc, Jupyter, Git, Microsoft Word</p> <p>AI/ML Frameworks: LangChain, Hugging Face, Scikit-learn, PyTorch, TensorFlow, OpenAI APIs</p> <p>Web &amp; Backend: FastAPI, Flask, Django REST Framework, RESTful APIs, SaaS Platforms</p> <p>Databases: PostgreSQL, MySQL, MongoDB, Pinecone, ChromaDB</p> <p>Technical Writing:  Google Docs, Notion, Canva, Architectural drawing using Excalidraw</p> <p>Documentation &amp; DevOps: MkDocs, Material for MkDocs, Markdown, GitHub Pages, GitHub Actions, ReadTheDocs, API Documentation (Postman)</p> <p>Domains: AI/ML, Software Development, Electronics, eCommerce, Telecom, Manufacturing &amp; Instrumentation, Cybersecurity, Localisation (i18n)</p>"},{"location":"about-me/#why-work-with-me","title":"\ud83c\udf1f Why Work With Me?","text":"<ul> <li>Engineer-Turned-Writer: I build what I write about, from AI agents and RAG systems to SaaS tools.  </li> <li>DevRel-Focused: I understand developer engagement and craft content that builds genuine relationships.  </li> <li>Audience-Centric: I adapt tone, depth, and style for developers, engineers, researchers, or enterprise teams.  </li> <li>Clarity &amp; Precision: Every word serves purpose, technically accurate, concise, and actionable.  </li> <li>Reliable Partner: Consistent communication, clear timelines, and high-quality deliverables.</li> </ul>"},{"location":"about-me/#client-testimonials","title":"\ud83d\udcac Client Testimonials","text":"<p>\"Wonderful work by Victory! Very knowledgeable about Gen AI and LLM technologies. Highly recommend working with Victory.\"</p> <p>\"Victory is an outstanding technical writer!\"</p> <p>\"I am thrilled to recommend Victory for his exceptional contributions as an AI Engineer at Case Radar. He brought unparalleled expertise and dedication to our team, playing a pivotal role in advancing our AI capabilities. His innovative approach to problem-solving and deep understanding of AI algorithms were instrumental in bringing our project closer to completion. He consistently impressed us with his ability to translate complex concepts into practical solutions, ensuring that our AI systems operated seamlessly and effectively. His attention to detail and commitment to excellence were evident in every aspect of his work, from designing algorithms to optimizing performance. Beyond his technical skills, Victory demonstrated outstanding teamwork and communication skills, fostering collaboration across departments and contributing to a positive work environment. His professionalism, reliability, and proactive attitude made him a valuable asset to our team. I have no doubt that he will continue to excel in his future endeavours, and I wholeheartedly recommend him for any role that requires top-notch AI expertise and a passion for innovation.\"</p>"},{"location":"about-me/#lets-collaborate","title":"\ud83e\udd1d Let\u2019s Collaborate","text":"<p>Whether you need: - Technical documentation or developer guides - AI-powered automation or ML solutions - White papers, datasheets, or API docs - DevRel-driven technical content  </p> <p>I\u2019m here to help you educate, engage, and grow your technical audience \u2014 one line of code and one clear sentence at a time.</p>"},{"location":"code-examples/","title":"\ud83d\udcbb Code &amp; Content Tabs Showcase","text":"<p>Welcome to my Code &amp; Content Tabs Showcase \u2014 a demonstration of how I structure and present multi-language, developer-focused documentation using Material for MkDocs.</p> <p>This page reflects my ability to combine clarity, technical accuracy, and modern design, creating documentation that developers actually enjoy reading.</p>"},{"location":"code-examples/#why-this-matters","title":"\ud83d\ude80 Why This Matters","text":"<p>In developer documentation, clarity is everything.</p> <p>Great documentation doesn\u2019t just explain, it teaches, guides, and inspires. That\u2019s why I use clean formatting, interactive tabs, and callouts to help readers absorb information faster.</p> <p>Developer Experience First</p> <p>Every decision here (layout, tone, formatting, or visuals), is made with the developer experience in mind. When documentation feels effortless, adoption naturally follows.</p>"},{"location":"code-examples/#content-tabs-in-action","title":"\ud83e\uddf1 Content Tabs in Action","text":"<p>Below are some examples of how I present different types of content (text, lists, and code) in a modular and modern way.</p>"},{"location":"code-examples/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text.</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol> <p>Why Use Content Tabs?</p> <p>Content tabs help developers find examples in their preferred format without scrolling endlessly. This approach works beautifully for SDK documentation, API endpoints, or setup instructions across multiple platforms.</p>"},{"location":"code-examples/#code-examples-in-multiple-languages","title":"\ud83e\udde0 Code Examples in Multiple Languages","text":"<p>As a technical writer and AI engineer, I understand that documentation often needs to support developers working in different stacks. That\u2019s why I organize code examples with clean tabs and consistent formatting.</p> PythonJavaScriptC++Bash <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    cout &lt;&lt; \"Hello world!\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>echo \"Hello world!\"\n</code></pre> Multi-Language Code Examples <p>Supporting multiple programming languages in a single documentation flow makes your product accessible to a broader audience. Developers can instantly switch to the example that fits their environment \u2014 no searching required.</p>"},{"location":"code-examples/#advanced-callouts-for-context","title":"\u2699\ufe0f Advanced Callouts for Context","text":"<p>I also use admonitions and collapsible info blocks to guide users through complex technical information while keeping the interface clean.</p> <p>Quick Setup Example</p> <p>Here's how you can start a live MkDocs server to preview documentation in real-time.</p> <pre><code>mkdocs serve\n</code></pre> <p>Then open your browser at <code>http://127.0.0.1:8000</code> to view your docs.</p> Pro Tip: Automate with GitHub Actions <p>You can automatically build and deploy your MkDocs site to GitHub Pages using CI/CD workflows.</p> <pre><code>name: Deploy Docs\non:\n  push:\n    branches: [ main ]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"code-examples/#why-i-build-docs-like-this","title":"\ud83e\udde9 Why I Build Docs Like This","text":"<p>Every documentation system I build is guided by three core principles:</p> <ol> <li>Clarity: Technical information should be easy to follow and free from unnecessary complexity.  </li> <li>Consistency: Readers shouldn\u2019t have to \u201clearn\u201d how to read your docs, structure should feel familiar across pages.  </li> <li>Scalability: From a single API reference to a 100-page developer portal, I build docs that scale with your product.</li> </ol> <p>My Philosophy</p> <p>\u201cGood documentation turns confusion into confidence.\u201d \u2014 Victory Nnaji</p>"},{"location":"code-examples/#built-with","title":"\ud83d\udcda Built With","text":"<ul> <li>MkDocs \u2013 Static site generator for elegant documentation  </li> <li>Material for MkDocs \u2013 Modern, responsive, developer-focused theme  </li> <li>Markdown &amp; YAML \u2013 Simple, lightweight authoring  </li> <li>GitHub Pages + GitHub Actions \u2013 Continuous deployment and version control  </li> </ul>"},{"location":"code-examples/#summary","title":"\ud83c\udfc1 Summary","text":"<p>This page demonstrates: - My ability to design interactive, developer-first documentation - Use of advanced Markdown features in Material for MkDocs - Technical and stylistic consistency across multi-language examples - My approach to building documentation that educates and delights developers</p> <p>\ud83d\udcac If you want documentation that feels like a product, not an afterthought, I can help you design it.</p>"},{"location":"diagram-examples/","title":"\ud83e\udded Diagram Examples","text":"<p>This page showcases how I use Mermaid diagrams within Material for MkDocs to make technical documentation more visual, interactive, and developer-friendly.</p> <p>From system flows to API sequences and architectural overviews, diagrams help readers grasp complex ideas at a glance \u2014 especially in developer docs and product onboarding materials.</p>"},{"location":"diagram-examples/#flowchart-1-debug-process-loop","title":"\u2699\ufe0f Flowchart 1 \u2014 Debug &amp; Process Loop","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre> <p>What This Shows</p> <p>This flowchart represents a basic debugging loop, where a process checks for failure conditions and iteratively resolves issues until success is achieved. It\u2019s a great example of how procedural or troubleshooting logic can be visualized clearly.</p> <p>\u2705 Use Case: Ideal for troubleshooting guides, testing workflows, or data validation processes in technical documentation.</p>"},{"location":"diagram-examples/#flowchart-2-trustpilot-webflow-integration","title":"\ud83d\udcac Flowchart 2 \u2014 Trustpilot &amp; Webflow Integration","text":"<pre><code>graph TD\n    A[Customer Review Event] --&gt; B[Trustpilot API]\n    B --&gt; C[Webhook Notification]\n    C --&gt; D[Backend Middleware]\n    D --&gt; E[Data Transformation]\n    E --&gt; F[Webflow CMS API]\n    F --&gt; G[Collection Update]\n    G --&gt; H[Live Site Display]\n\n    I[TrustBox Widgets] --&gt; J[Direct Display]\n    J --&gt; K[Webflow Custom Code]</code></pre> <p>Explaining the Flow</p> <p>This diagram illustrates the data flow between Trustpilot and Webflow, showing how customer reviews move from event to live display.</p> <ul> <li>Trustpilot API sends review data through a webhook.  </li> <li>A backend middleware processes and transforms the data.  </li> <li>The Webflow CMS API updates content dynamically.  </li> <li>Reviews appear instantly on the live site or via TrustBox Widgets.</li> </ul> <p>\u2705 Use Case: Useful in API documentation, integration guides, or DevRel tutorials to visualize backend\u2013frontend data movement.</p>"},{"location":"diagram-examples/#sequence-diagram-server-to-database-communication","title":"\ud83d\udd01 Sequence Diagram \u2014 Server to Database Communication","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre> <p>When to Use Sequence Diagrams</p> <p>Sequence diagrams show time-ordered interactions between system components \u2014 perfect for APIs, webhooks, or service communications.</p> <p>In this example: - The Server requests health and data from a Terminal. - The Terminal performs a health check and fetches customer data from a Database. - Results are returned to the Server, confirming successful operation.</p> <p>\u2728 Why I Use Mermaid Diagrams</p> <p>My Approach to Visual Documentation</p> <ul> <li>Clarity: Complex ideas are easier to understand visually.</li> <li>Consistency: Diagrams align perfectly with Markdown-based docs \u2014 no external tools needed.</li> <li>Maintainability: Easy to update as systems evolve.</li> <li>Engagement: Visual content keeps readers focused longer.</li> </ul> <p>I integrate diagrams directly into Markdown for live, version-controlled visuals that evolve alongside the codebase.</p>"},{"location":"diagram-examples/#excalidraw-diagrams-visual-architecture-concepts","title":"\ud83c\udfa8 Excalidraw Diagrams \u2014 Visual Architecture &amp; Concepts","text":"<p>Beyond code-based diagrams, I also create detailed visual diagrams using Excalidraw for complex architectural overviews, UI flows, and conceptual explanations.</p>"},{"location":"diagram-examples/#mcp-architecture-overview","title":"\ud83c\udfd7\ufe0f MCP Architecture Overview","text":"<p>System Architecture Visualization</p> <p>This diagram showcases the Model Context Protocol (MCP) architecture, illustrating how different components interact and communicate within the system.</p> <p>\u2705 Use Case: Perfect for documenting system architectures, showing component relationships, and explaining technical concepts that require visual precision.</p>"},{"location":"diagram-examples/#ai-framework-decision-flow","title":"\ud83e\udd16 AI Framework Decision Flow","text":"<p>Decision Flow Visualization</p> <p>A comprehensive flowchart showing how to evaluate and choose the right AI framework for different use cases and requirements.</p> <p>\u2705 Use Case: Ideal for creating decision trees, evaluation frameworks, and process documentation in product guides.</p>"},{"location":"diagram-examples/#api-cms-integration","title":"\ud83d\udcf1 API-CMS Integration","text":"<p>Integration Overview</p> <p>This diagram illustrates the seamless integration between API services and CMS platforms, showing data flows and system interactions.</p> <p>\u2705 Use Case: Great for API documentation, integration guides, and technical onboarding materials.</p>"},{"location":"diagram-examples/#widget-configuration","title":"\ud83e\udde9 Widget Configuration","text":"<p>UI Component Flow</p> <p>Visual representation of widget configuration and integration within a web application.</p> <p>\u2705 Use Case: Perfect for UI/UX documentation, component libraries, and frontend integration guides.</p>"}]}